class Solution {
    static public boolean dfs(char[][] mat, String word, int row, int col, int index, boolean[][] visited){
        if(index == word.length()) return true;
        
        if(row<0 || row>= mat.length || col<0 || col >= mat[0].length || visited[row][col] || mat[row][col] != word.charAt(index)){
            return false;
        }
        
        visited[row][col] = true;
        
        if(dfs(mat, word, row-1, col, index+1, visited)) return true;
        if(dfs(mat, word, row+1, col, index+1, visited)) return true;
        if(dfs(mat, word, row, col-1, index+1, visited)) return true;
        if(dfs(mat, word, row, col+1, index+1, visited)) return true;
        
        visited[row][col] = false;
        
        return false;
    }
    static public boolean isWordExist(char[][] mat, String word) {
        // Code here
        int rows =  mat.length;
        int cols = mat[0].length;
        
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(mat[i][j] == word.charAt(0)){
                    if(dfs(mat, word, i, j, 0, new boolean[rows][cols])){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
}
